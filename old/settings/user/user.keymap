;; User keymap
;; -----------------------------
;; Keymaps are stored as a set of diffs that are merged together together
;; to create the final set of keys. You can modify these diffs to either add
;; or subtract bindings.
;;
;; Like behaviors, keys are bound by tag. When objects with those tags are active
;; the key bindings are live. Keys can be bound to any number of Light Table commands,
;; allowing you the flexibility to execute multiple operations together. To see a list
;; of all the commands you can execute, start typing a word related to the thing you
;; want to do in between the square brackets (e.g. type "editor").

{:+ {:app {"ctrl-shift-right" [:tabs.move-next-tabset]
           "ctrl-shift-left" [:tabs.move-prev-tabset]
           "ctrl-alt-left" [:tabs.prev]
           "ctrl-alt-right" [:tabs.next]
           "ctrl-alt-w" [:workspace.show]
           "ctrl-alt-c" [:toggle-console]
           "ctrl-alt-o" [:show-connect]}

     :editor {"alt-w" [:editor.watch.watch-selection]
              "alt-shift-w" [:editor.watch.unwatch]
              "ctrl-shift-a" [:smart-indent-selection]
              "ctrl-alt-enter" [:clear-inline-results]
              "ctrl-shift-c" [:toggle-comment-selection]

              ;; ==== Paredit!
              "alt-enter" [(:paredit.select.parent "(")
                           :eval-editor-form
                           :paredit.select.clear]

              ;;Select the parent expression, whether that's [], {}, or ()
              "shift-alt-s" [:paredit.select.parent]

              ;;Format the parent ()
              "alt-s" [(:paredit.select.parent "(")
                       :smart-indent-selection
                       :paredit.select.clear]

              ;;Slurp and Barf, with less ridiculous and more intuitive names
              "alt-shift-," [:paredit.grow.right]
              "alt-shift-." [:paredit.shrink.right]}

     :editor.clj {"alt-d" [:editor.doc.toggle]
                  "pmeta-i" [(:eval.custom
                              "(do
                                 (require 'kibit.check)
                                 (if-let [better (kibit.check/check-expr '__SELECTION__)]
                                   (with-out-str
                                     (clojure.pprint/write (:alt better)
                                     :suppress-namespaces true
                                     :dispatch clojure.pprint/code-dispatch))
                                   __SELECTION*__))"
                              {:result-type :replace :verbatim true})]}
     :editor.cljs {"alt-d" [:editor.doc.toggle]}

     :editor.keys.normal {"ctrl-[" [(:editor.open-pair "[")]}}

 :- {:editor.keys.normal "["}}
